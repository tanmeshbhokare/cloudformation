AWSTemplateFormatVersion : 2010-09-09
Parameters:
  BucketName:
    Description: A name for S3 Bucket
    Type: String
    Default: "tanmeshbucket"
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-S3-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:  !Sub 'arn:aws:s3:::${BucketName}/*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaFunction
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib

          def handler(event, context):
              s3_client = boto3.client('s3')

              bucket_name = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              key = urllib.parse.unquote_plus(key, encoding='utf-8')

              message = key + ' is the key of file uploaded and bucket name is: ' + bucket_name
              print(message)

              response = s3_client.get_object(Bucket=bucket_name, Key=key)
              contents = response["Body"].read().decode()
              contents = json.loads(contents)

              print("Contents of uploaded file are : \n", contents)

              delete_response = s3_client.delete_object(Bucket=bucket_name, Key=key)
              print('sucessfully deleted '+ key +' from bucket : ' + bucket_name)

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      SourceAccount: !Ref AWS::AccountId

  Bucket:
    Type: AWS::S3::Bucket
    DependsOn: ProcessingLambdaPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt LambdaFunction.Arn

